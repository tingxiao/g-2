// -*- C++ -*-
//
// Package:     <BabayagaGeneratorProd>
// Module:      BabayagaGeneratorProd
// 
// Description: <one line class summary>
//
// Implementation:
//     <Notes on implementation>
//
// Author:      Brian K. Heltsley
// Created:     Tue Jan 13 12:19:00 EST 2004
// $Id: BabayagaGeneratorProd.cc,v 1.4 2004/03/17 21:15:41 bkh Exp $
//
// Revision history
//
// $Log: BabayagaGeneratorProd.cc,v $
// Revision 1.4  2004/03/17 21:15:41  bkh
// Remove default mode to avoid typos giving Bhabhas; tag Surik's recent fixes
//
// Revision 1.3  2004/01/22 19:22:19  bkh
// First tag
//
// Revision 1.2  2004/01/22 16:48:13  souren
// Code still need to be tested, there is a problem with Mode 4 (pi-,pi+) , but MuPair, Bhabha and GamGam seem fine
//
// Revision 1.1.1.1  2004/01/13 23:24:13  bkh
// imported BabayagaGeneratorProd sources
//
//

#include "Experiment/Experiment.h"
#include "Experiment/fortran_types.h"


// system include files

// user include files
#include "BabayagaGeneratorProd/BabayagaGeneratorProd.h"
#include "BabayagaGeneratorProd/BabayagaDecayTreeProxy.h"
#include "Experiment/report.h"

#include "DataHandler/RecordMethods.h"
#include "DataHandler/ProxyFactory.h"
#include "DataHandler/ProxyFactoryFunction.h"

// STL classes
// You may have to uncomment some of these or other stl headers
// depending on what other header files you include (e.g. FrameAccess etc.)!
#include <string>
#include <vector>
//#include <set>
//#include <map>
//#include <algorithm>
//#include <utility>

//
// constants, enums and typedefs
//
static const char* const kFacilityString = "BabayagaGeneratorProd.BabayagaGeneratorProd" ;

// ---- cvs-based strings (Id and Tag with which file was checked out)
static const char* const kIdString  = "$Id: BabayagaGeneratorProd.cc,v 1.4 2004/03/17 21:15:41 bkh Exp $";
static const char* const kTagString = "$Name: v01_00_04 $";

//
// static data member definitions
//

//
// constructors and destructor
//
BabayagaGeneratorProd::BabayagaGeneratorProd( void )               // anal1
   : Producer( "BabayagaGeneratorProd" ) ,
     m_Menu("BabayagaParameters", this),
     m_mode ( "Mode" , &m_Menu,  "None" ),
     m_minimumAngle("MinimumAngle" , &m_Menu , 20.0),
     m_maximumAngle("MaximumAngle" , &m_Menu , 160.0),
     m_minimumEnergy("MinimumEnergy" , &m_Menu , 0. ),
     m_maximumAcollinarity("MaximumAcollinarity", &m_Menu , 360.0)     
{
   report( DEBUG, kFacilityString ) << "here in ctor()" << endl;
   m_mode.setHelpString("Mode: Bhabha, MuPair, GamGam, or PiPair" ) ;
   m_minimumAngle.setHelpString("MinimumAngle: minimum angle of outgoing "
				"partice (should be in degree) \n");
   m_maximumAngle.setHelpString("MaximumAngle: maximum angle of outgoing "
				"partice (should be in degree) \n");
   m_minimumEnergy.setHelpString("MinimumEnergy: minimum energy of outgoing "
				"partice (should be in GeV) \n");
   m_maximumAcollinarity.setHelpString("MaximumAcollinarity: maximum "
				       "acollinarity of outgoing partices "
				       " (should be in degree) \n");

   registerProxyFactory( 
      Stream::kEvent, 
      new ProxyFactoryFunction< BabayagaGeneratorProd, BabayagaDecayTreeProxy >(
	 *this, 
	 &BabayagaGeneratorProd::makeMyProxy ),
      UsageTag("Generator") );    // or UsageTag( "MyUsage" )
}

ProxyBase*
BabayagaGeneratorProd::makeMyProxy()
{ 
   return new BabayagaDecayTreeProxy( this );
}

// Proxy Registration Step 2:
// template instantiations for proxy factories
#include "DataHandler/Template/ProxyFactoryFunction.cc"
template class ProxyFactoryFunction< BabayagaGeneratorProd, BabayagaDecayTreeProxy >;

// non-trivial proxyfactory producer method used above
// (if you want to use it, don't forget to declare this method 
//  in "producer.h"!)

// BabayagaGeneratorProd::BabayagaGeneratorProd( const BabayagaGeneratorProd& iBabayagaGeneratorProd )
// {
//    *this = iBabayagaGeneratorProd;
// }

BabayagaGeneratorProd::~BabayagaGeneratorProd()                    // anal5
{
   report( DEBUG, kFacilityString ) << "here in dtor()" << endl;
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}

//
// assignment operators
//
// const BabayagaGeneratorProd& BabayagaGeneratorProd::operator=( const BabayagaGeneratorProd& iBabayagaGeneratorProd )
// {
//   if( this != &iBabayagaGeneratorProd ) {
//      // do actual copying here, plus:
//      // "SuperClass"::operator=( iBabayagaGeneratorProd );
//   }
//
//   return *this;
// }

//
// member functions
//

// ------------ methods for beginning/end "Interactive" ------------
// --------------------------- init method -------------------------
void
BabayagaGeneratorProd::init( void )          // anal1 "Interactive"
{
   report( DEBUG, kFacilityString ) << "here in init()" << endl;

   // do any initialization here based on Parameter Input by User
   // (e.g. run expensive algorithms that are based on parameters
   //  specified by user at run-time)
}

extern "C"
void 
bby_finishup_() ;
// -------------------- terminate method ----------------------------
void
BabayagaGeneratorProd::terminate( void )     // anal5 "Interactive"
{
   report( DEBUG, kFacilityString ) << "here in terminate()" << endl;
   
   // do anything here BEFORE New Parameter Change
   // (e.g. write out result based on parameters from user-input)
   bby_finishup_();
}

// ---------------- standard place to book histograms ---------------
void
BabayagaGeneratorProd::hist_book( HIHistoManager& )
{
   report( DEBUG, kFacilityString ) << "here in hist_book()" << endl;

   // book your histograms here

}

//
// const member functions
//

//
// static member functions
//
