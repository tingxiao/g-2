// -*- C++ -*-
//
// Package:     Pi0Pi0JpsiProc
// Module:      Pi0Pi0JpsiProc
// 
// Description: <one line class summary>
//
// Implementation:
//     <Notes on implementation>
//
// Author:      
// Created:     Wed Mar 27 18:55:25 CDT 2013
// $Id$
//
// Revision history
//
// $Log$
//

#include "Experiment/Experiment.h"

// system include files

// user include files
#include "Pi0Pi0JpsiProc/Pi0Pi0JpsiProc.h"
#include "Experiment/report.h"
#include "Experiment/units.h"  // for converting to/from standard CLEO units
#include "HistogramInterface/HINtupleVarNames.h"
#include "HistogramInterface/HINtupleArray.h"
#include "HistogramInterface/HIHist1D.h"

#include "DataHandler/Record.h"
#include "DataHandler/Frame.h"
#include "FrameAccess/extract.h"
#include "FrameAccess/FAItem.h"
#include "FrameAccess/FATable.h"

#include "Navigation/NavShower.h"
#include "C3cc/CcShowerAttributes.h"
#include "Navigation/NavShowerServer.h"
#include "C3ccProd/CcFortranShowerCorrector.h"
#include "C3Mu/MuTrack.h"
#include "Navigation/NavMuonId.h"
#include "Navigation/NavTkShMatch.h"

//I added the following at the suggestion of the NavShower web page
#include "Navigation/NavConReg.h"
#include "KinematicTrajectory/KTKinematicData.h"
#include "Navigation/NavTkShMatch.h"
#include "C3cc/CcAssignedEnergyHit.h"

#include "Navigation/NavTrack.h"
#include "TrackRoot/TRHelixFit.h"
#include "TrackRoot/TRTrackFitQuality.h"
#include "TrackRoot/TRSeedTrackQuality.h"
#include "TrackDelivery/TDKinematicFit.h"
#include "Navigation/NavElecId.h"

#include "FitEvt/FitEvtSettings.h"
#include "FitEvt/FitEvt.h"
#include "BeamEnergy/BeamEnergy.h"
#include "MagField/MagneticField.h"
#include "MagField/MFFieldMap.h"
#include "BeamSpot/BeamSpot.h"

#include "Navigation/NavPi0ToGG.h"
#include "Navigation/NavEtaToGG.h"
#include "PhotonDecays/PhdPi0.h"
#include "PhotonDecays/PhdEtaToGG.h"
#include "Navigation/NavTkShMatch.h"
#include <PhotonDecays/PhdPi0.h>
#include <CleoDB/DBEventHeader.h>

#include "CleoDB/DBEventHeader.h"
#include "TriggerData/TriggerData.h"
#include "TriggerL1Data/TriggerL1Data.h"
#include "Level4Proc/Level4Decision.h"
//RICH example
#include "Navigation/NavRich.h"
//Dedx example
#include "DedxInfo/DedxInfo.h"






// STL classes
// You may have to uncomment some of these or other stl headers 
// depending on what other header files you include (e.g. FrameAccess etc.)!
//#include <string>
//#include <vector>
//#include <set>
//#include <map>
//#include <algorithm>
//#include <utility>

//
// constants, enums and typedefs
//
static const char* const kFacilityString = "Processor.Pi0Pi0JpsiProc" ;

// ---- cvs-based strings (Id and Tag with which file was checked out)
static const char* const kIdString  = "$Id: processor.cc,v 1.41 2006/02/08 19:38:02 wsun Exp $";
static const char* const kTagString = "$Name: v07_03_00 $";

//
// static data member definitions
//



//
// constructors and destructor
//
Pi0Pi0JpsiProc::Pi0Pi0JpsiProc( void )               // anal1
   : Processor( "Pi0Pi0JpsiProc" )
{
   report( DEBUG, kFacilityString ) << "here in ctor()" << endl;

   // ---- bind a method to a stream -----
   // These lines ARE VERY IMPORTANT! If you don't bind the 
   // code you've just written (the "action") to a stream, 
   // your code won't get executed!

   bind( &Pi0Pi0JpsiProc::event,    Stream::kEvent );
   bind( &Pi0Pi0JpsiProc::beginRun, Stream::kBeginRun );
   //bind( &Pi0Pi0JpsiProc::endRun,   Stream::kEndRun );

   // do anything here that needs to be done at creation time
   // (e.g. allocate resources etc.)


}

Pi0Pi0JpsiProc::~Pi0Pi0JpsiProc()                    // anal5
{
   report( DEBUG, kFacilityString ) << "here in dtor()" << endl;
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}

//
// member functions
//

// ------------ methods for beginning/end "Interactive" ------------
// --------------------------- init method -------------------------
void
Pi0Pi0JpsiProc::init( void )          // anal1 "Interactive"
{
   report( DEBUG, kFacilityString ) << "here in init()" << endl;

   // do any initialization here based on Parameter Input by User
   // (e.g. run expensive algorithms that are based on parameters
   //  specified by user at run-time)

}

// -------------------- terminate method ----------------------------
void
Pi0Pi0JpsiProc::terminate( void )     // anal5 "Interactive"
{
   report( DEBUG, kFacilityString ) << "here in terminate()" << endl;

   // do anything here BEFORE New Parameter Change
   // (e.g. write out result based on parameters from user-input)
 
}


// ---------------- standard place to book histograms ---------------
enum {
chisqv1,chisqf1,         //chisq of 4C fit, normal 4C fit
chisqv2,chisqf2,         //chisq of J/psi mass fit

knshower,
e1,th1,phi1,e9251,       // unfitted photon energy
e2,th2,phi2,e9252,
e3,th3,phi3,e9253,
e4,th4,phi4,e9254,
e5,th5,phi5,e9255,
e6,th6,phi6,e9256,
e7,th7,phi7,e9257,
e8,th8,phi8,e9258,
e9,th9,phi9,e9259,
e10,th10,phi10,e92510,

eop1,eop2,me1,me2,dedx1,dedx2, // 2 leptons
trte1,trpx1,trpy1,trpz1,trte2,trpx2,trpy2,trpz2,
f1trte1,f1trpx1,f1trpy1,f1trpz1,f1trte2,f1trpx2,f1trpy2,f1trpz2,
id1,id2,charge1,charge2,

f1pi0te1,f1pi0px1,f1pi0py1,f1pi0pz1,                   // fitted pi0 energy and momenta
pi0hie1,pi0loe1,                                 // and its photon energies
f1pi0te2,f1pi0px2,f1pi0py2,f1pi0pz2,
pi0hie2,pi0loe2,

passed2,passed3,
peak2,peak3,
kVarNum};

void
Pi0Pi0JpsiProc::hist_book( HIHistoManager& iHistoManager )
{
   report( DEBUG, kFacilityString ) << "here in hist_book()" << endl;

   // book your histograms here
   HINtupleVarNames ntupleNames(kVarNum);

   ntupleNames.addVar(chisqv1,       "chisqv1");
   ntupleNames.addVar(chisqf1,       "chisqf1");
   ntupleNames.addVar(chisqv2,       "chisqv2");
   ntupleNames.addVar(chisqf2,       "chisqf2");
   ntupleNames.addVar(knshower,       "knshower");
   ntupleNames.addVar(e1,          "e1");
   ntupleNames.addVar(th1,        "th1");
   ntupleNames.addVar(phi1,       "phi1");
   ntupleNames.addVar(e9251,    "e9251");
   ntupleNames.addVar(e2,          "e2");
   ntupleNames.addVar(th2,        "th2");
   ntupleNames.addVar(phi2,       "phi2");
   ntupleNames.addVar(e9252,    "e9252");
   ntupleNames.addVar(e3,          "e3");
   ntupleNames.addVar(th3,        "th3");
   ntupleNames.addVar(phi3,       "phi3");
   ntupleNames.addVar(e9253,    "e9253");
   ntupleNames.addVar(e4,          "e4");
   ntupleNames.addVar(th4,        "th4");
   ntupleNames.addVar(phi4,       "phi4");
   ntupleNames.addVar(e9254,    "e9254");
   ntupleNames.addVar(e5,          "e5");
   ntupleNames.addVar(th5,        "th5");
   ntupleNames.addVar(phi5,       "phi5");
   ntupleNames.addVar(e9255,    "e9255");
   ntupleNames.addVar(e6,          "e6");
   ntupleNames.addVar(th6,        "th6");
   ntupleNames.addVar(phi6,       "phi6");
   ntupleNames.addVar(e9256,    "e9256");
   ntupleNames.addVar(e7,          "e7");
   ntupleNames.addVar(th7,        "th7");
   ntupleNames.addVar(phi7,       "phi7");
   ntupleNames.addVar(e9257,    "e9257");
   ntupleNames.addVar(e8,          "e8");
   ntupleNames.addVar(th8,        "th8");
   ntupleNames.addVar(phi8,       "phi8");
   ntupleNames.addVar(e9258,    "e9258");
   ntupleNames.addVar(e9,          "e9");
   ntupleNames.addVar(th9,        "th9");
   ntupleNames.addVar(phi9,       "phi9");
   ntupleNames.addVar(e9259,    "e9259");
   ntupleNames.addVar(e10,          "e10");
   ntupleNames.addVar(th10,        "th10");
   ntupleNames.addVar(phi10,       "phi10");
   ntupleNames.addVar(e92510,    "e92510");
   ntupleNames.addVar(eop1,         "eop1");
   ntupleNames.addVar(eop2,         "eop2");
   ntupleNames.addVar(me1,          "me1");
   ntupleNames.addVar(me2,          "me2");
   ntupleNames.addVar(dedx1,        "dedx1");
   ntupleNames.addVar(dedx2,        "dedx2");
   ntupleNames.addVar(trte1,        "trte1");
   ntupleNames.addVar(trpx1,        "trpx1");
   ntupleNames.addVar(trpy1,        "trpy1");
   ntupleNames.addVar(trpz1,        "trpz1");
   ntupleNames.addVar(trte2,        "trte2");
   ntupleNames.addVar(trpx2,        "trpx2");
   ntupleNames.addVar(trpy2,        "trpy2");
   ntupleNames.addVar(trpz2,        "trpz2");
   ntupleNames.addVar(f1trte1,       "f1trte1");
   ntupleNames.addVar(f1trpx1,       "f1trpx1");
   ntupleNames.addVar(f1trpy1,       "f1trpy1");
   ntupleNames.addVar(f1trpz1,       "f1trpz1");
   ntupleNames.addVar(f1trte2,       "f1trte2");
   ntupleNames.addVar(f1trpx2,       "f1trpx2");
   ntupleNames.addVar(f1trpy2,       "f1trpy2");
   ntupleNames.addVar(f1trpz2,       "f1trpz2");
   ntupleNames.addVar(id1,          "id1");
   ntupleNames.addVar(id2,          "id2");
   ntupleNames.addVar(charge1,      "charge1");
   ntupleNames.addVar(charge2,      "charge2");
   ntupleNames.addVar(f1pi0te1,    "f1pi0te1");
   ntupleNames.addVar(f1pi0px1,    "f1pi0px1");
   ntupleNames.addVar(f1pi0py1,    "f1pi0py1");
   ntupleNames.addVar(f1pi0pz1,    "f1pi0pz1");
   ntupleNames.addVar(pi0hie1,    "pi0hie1");
   ntupleNames.addVar(pi0loe1,    "pi0loe1");
   ntupleNames.addVar(f1pi0te2,    "f1pi0te2");
   ntupleNames.addVar(f1pi0px2,    "f1pi0px2");
   ntupleNames.addVar(f1pi0py2,    "f1pi0py2");
   ntupleNames.addVar(f1pi0pz2,    "f1pi0pz2");
   ntupleNames.addVar(pi0hie2,    "pi0hie2");
   ntupleNames.addVar(pi0loe2,    "pi0loe2");
   ntupleNames.addVar(passed2,      "passed2");
   ntupleNames.addVar(passed3,      "passed3");
   ntupleNames.addVar(peak2,        "peak2");
   ntupleNames.addVar(peak3,        "peak3");

   m_showerTuple = iHistoManager.ntuple(10,"tuple", kVarNum, 10000, ntupleNames.names());


}

// --------------------- methods bound to streams -------------------
ActionBase::ActionResult
Pi0Pi0JpsiProc::event( Frame& iFrame )          // anal3 equiv.
{
   report( DEBUG, kFacilityString ) << "here in event()" << endl;

   const int kMaxTrack = 2;
   const int kMaxShower = 10;

   double ChisqV1 = 1000000.;
   double ChisqF1 = 1000000.;
   double ChisqV2 = 1000000.;
   double ChisqF2 = 1000000.;
   double E[kMaxShower] = {10000.,10000.,10000.,10000.,10000.,10000.,10000.,10000.,10000.,10000.};
   double Theta[kMaxShower] = {10000.,10000.,10000.,10000.,10000.,10000.,10000.,10000.,10000.,10000.};
   double Phi[kMaxShower] = {10000.,10000.,10000.,10000.,10000.,10000.,10000.,10000.,10000.,10000.};
   double E925[kMaxShower] = {0.,0.,0.,0.,0.,0.,0.,0.,0.,0.};
   double ME[kMaxTrack] = {10000.,10000.};
   double EOP[kMaxTrack] = {10000.,10000.};
   double DEDX[kMaxTrack] = {10000.,10000.};
   double PE[kMaxTrack] = {0.,0.};
   double PX[kMaxTrack] = {0.,0.};
   double PY[kMaxTrack] = {0.,0.};
   double PZ[kMaxTrack] = {0.,0.};
   double F1PE[kMaxTrack] = {0.,0.};
   double F1PX[kMaxTrack] = {0.,0.};
   double F1PY[kMaxTrack] = {0.,0.};
   double F1PZ[kMaxTrack] = {0.,0.};
   double CHARGE[kMaxTrack] = {100.,100.};
   double ID[kMaxTrack] = {0.,0.};  //1:e, 2: mu
   double F1PI0PE[kMaxTrack] = {0.,0.};
   double F1PI0PX[kMaxTrack] = {0.,0.};
   double F1PI0PY[kMaxTrack] = {0.,0.};
   double F1PI0PZ[kMaxTrack] = {0.,0.};
   double PI0HIE[kMaxTrack] = {0.,0.};
   double PI0LOE[kMaxTrack] = {0.,0.};
   double PASSED2 = 0;
   double PASSED3 = 0;
   double PEAK2 = 0;
   double PEAK3 = 0;

   const double kJpsiMass = 3.096916;

   float tuple[kVarNum];

/////////////////////////////// # of shower > 4 //////////////////////////////////////

   FATable< NavShower > showerTable;
   extract( iFrame.record( Stream::kEvent ) , showerTable, "GoodThings" );

   if(showerTable.size()<4)
      return ActionBase::kFailed;

   FATable< NavShower >::const_iterator showerBegin = showerTable.begin();
   FATable< NavShower >::const_iterator showerEnd = showerTable.end();

   int unmatchedShowers = 0;

   for ( FATable< NavShower >::const_iterator showerItr = showerBegin;
         showerItr != showerEnd ;
         ++showerItr )
   {

      int j = unmatchedShowers++;

      if(j<kMaxShower){

        E[j] = showerItr->attributes().energy();
        Theta[j] = showerItr->attributes().theta();
        Phi[j] = showerItr->attributes().phi();
        E925[j] = showerItr->attributes().x925();
      }
   }


//////////////////////////////////// # of tracks == 2 /////////////////////////////////


   FATable< NavTrack > trackTable;
   extract( iFrame.record( Stream::kEvent ) , trackTable, "GoodThings" );

   if(trackTable.size() != kMaxTrack)
       return ActionBase::kFailed;

   FATable< NavTrack >::const_iterator trackTableBegin = trackTable.begin();
   FATable< NavTrack >::const_iterator trackTableEnd = trackTable.end();

/////////////////////////////////// net charge == 0 ////////////////////////////////////

   int unmatchedtracks = 0;
   int charge_sum = 0;

   for ( FATable< NavTrack >::const_iterator trackItr = trackTableBegin;
         trackItr != trackTableEnd ;
         ++trackItr )
   {
      int i = unmatchedtracks++;
      CHARGE[i]=(*trackItr).muonFit()->charge();
      charge_sum += CHARGE[i];
   }

   if(charge_sum != 0)
       return ActionBase::kFailed;


//////////////////////////////////////////////////////////////////////////////////////////
/////////////////// lepton energy cut |e| > 1 GeV //////////////////////////////////////
/////////////////// ee: 0.8<E/p<1.2, mumu: E/p<0.8 ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

   unmatchedtracks = 0;
   int id_sum = 0;

   for ( FATable< NavTrack >::const_iterator trackItr = trackTableBegin;
         trackItr != trackTableEnd ;
         ++trackItr )
   {
      int i = unmatchedtracks++;
      PE[i]=(*trackItr).muonFit()->lorentzMomentum().e();

      if(trackItr->trackShowerMatch().valid())
         ME[i] = trackItr->trackShowerMatch()->matchedEnergy();

      EOP[i] = trackItr->elecId().eOverP();
      FAItem<DedxInfo> the_dedx = (*trackItr).dedxInfo();

      if(PE[i] > 1.0){

        if(EOP[i] > 0.8 && EOP[i] < 1.2) {
          FAItem<TDKinematicFit> electronFit = (*trackItr).electronFit();

          FATable<NavShower> brem(trackItr->bremShowers());
 
            HepDouble gamsx = 0., gamsy = 0., gamsz = 0.;

            for(FATable<NavShower>::const_iterator iGam=brem.begin();
                iGam != brem.end(); ++iGam) {
               gamsx += iGam->attributes().momentum().x();
               gamsy += iGam->attributes().momentum().y();
               gamsz += iGam->attributes().momentum().z();
            }
          if( (electronFit.valid()) && (the_dedx.valid()) )  {
            ID[i] = 1;
            PE[i]=sqrt(fabs( 0.000511*0.000511
                        + (electronFit->px()+gamsx)*(electronFit->px()+gamsx)
                        + (electronFit->py()+gamsy)*(electronFit->py()+gamsy)
                        + (electronFit->pz()+gamsz)*(electronFit->pz()+gamsz) )); 
            PX[i]=electronFit->px()+gamsx;
            PY[i]=electronFit->py()+gamsy;
            PZ[i]=electronFit->pz()+gamsz;
            DEDX[i]=the_dedx->eSigma();
          }
        }
        else if(EOP[i] < 0.8) {
          FAItem<TDKinematicFit> muonFit = (*trackItr).muonFit();
          if( (muonFit.valid()) && (the_dedx.valid()) )  {
            ID[i] = 2;
            PE[i]=muonFit->energy();
            PX[i]=muonFit->px();
            PY[i]=muonFit->py();
            PZ[i]=muonFit->pz();
            DEDX[i]=the_dedx->muSigma();
          }
        }
      }

      id_sum += ID[i];
   }
   if(id_sum > 0) {
     PASSED2 = 1;
     PEAK2 = sqrt(pow((PE[0]+PE[1]),2)-pow((PX[0]+PX[1]),2)
                  -pow((PY[0]+PY[1]),2)-pow((PZ[0]+PZ[1]),2));
   }

////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////// kinematic fitting  ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

   if(PASSED2) {

     FAItem<TDKinematicFit> tr[2];
     KTKinematicData track[2];
     unmatchedtracks = 0;

     for ( FATable< NavTrack >::const_iterator trackItr = trackTableBegin;
           trackItr != trackTableEnd ;
           ++trackItr )
       {
          int i = unmatchedtracks++;
          if(ID[i] == 1) {
            tr[i] = (*trackItr).electronFit();
            track[i] = *tr[i];

            FATable<NavShower> brem(trackItr->bremShowers());
 
            HepDouble gamsx = 0., gamsy = 0., gamsz = 0.;
            for(FATable<NavShower>::const_iterator iGam=brem.begin();
                iGam != brem.end(); ++iGam) {
               gamsx += iGam->attributes().momentum().x();
               gamsy += iGam->attributes().momentum().y();
               gamsz += iGam->attributes().momentum().z();
            }
            track[i].setMomentum(HepVector3D(tr[i]->px()+gamsx,tr[i]->py()+gamsy,tr[i]->pz()+gamsz));
          }
          else if(ID[i] == 2) {
            tr[i] = (*trackItr).muonFit();
            track[i] = *tr[i];
          }
       }

////////////////////////////////// 4C fit /////////////////////////////////////////////////////////////////////

     if(tr[0].valid() && tr[1].valid()) {

       FitEvt jpsi_ll( "Jpsi_ll", FitEvt::k_Mass, 0, kJpsiMass );
       jpsi_ll.newTrack(track[0]);
       jpsi_ll.newTrack(track[1]);
       jpsi_ll.doTheFit();

       if( (jpsi_ll.chisqVtx()>0) && (jpsi_ll.chisqFit()>0) ) {

         FATable<NavPi0ToGG> pi0Table;
         extract( iFrame.record( Stream::kEvent ) , pi0Table );
 
         FATable< NavPi0ToGG >::const_iterator pi0Begin = pi0Table.begin();
         FATable< NavPi0ToGG >::const_iterator pi0End = pi0Table.end();

         for (FATable< NavPi0ToGG >::const_iterator pi0Itr = pi0Begin;
            pi0Itr != pi0End ; ++pi0Itr) {

           if(pi0Itr.valid()
             && pi0Itr->pi0().fit()
             && pi0Itr->pi0().converged()
             && (pi0Itr->pi0().chisq() < 500)
             && (fabs(pi0Itr->pi0().pullMass()) < 3) ) {

             for (FATable< NavPi0ToGG >::const_iterator pi0Itr2 = pi0Itr+1;
                 pi0Itr2 != pi0End ; ++pi0Itr2) {

                 if(pi0Itr2.valid()
                    && pi0Itr2->pi0().fit()
                    && pi0Itr2->pi0().converged()
                    && (pi0Itr2->pi0().chisq() < 500)
                    && (fabs(pi0Itr2->pi0().pullMass()) < 3) 
                    && (pi0Itr2->hiEnShower().identifier() != pi0Itr->hiEnShower().identifier())
                    && (pi0Itr2->hiEnShower().identifier() != pi0Itr->loEnShower().identifier())
                    && (pi0Itr2->loEnShower().identifier() != pi0Itr->hiEnShower().identifier()) 
                    && (pi0Itr2->loEnShower().identifier() != pi0Itr->loEnShower().identifier()) ) {

                    FitEvt pipi( "Pipi", FitEvt::k_P4VecCM );
                    pipi.newPi0(pi0Itr->hiEnShower(),pi0Itr->loEnShower(), FitEvtSettings::instance().beamSpotKD());
                    pipi.newPi0(pi0Itr2->hiEnShower(),pi0Itr2->loEnShower(), FitEvtSettings::instance().beamSpotKD());
                    pipi.newKinDat(jpsi_ll.fitResult());
                    pipi.doTheFit();

                    if( (pipi.chisqVtx()>0) && (pipi.chisqFit()>0) ) {
 
                      const HepLorentzVector v1pi0 (pipi.kdFitVec()[0]->lorentzMomentum());
                      const HepLorentzVector v2pi0 (pipi.kdFitVec()[1]->lorentzMomentum());
                      const HepLorentzVector v1pi (jpsi_ll.kdFitVec()[0]->lorentzMomentum());
                      const HepLorentzVector v2pi (jpsi_ll.kdFitVec()[1]->lorentzMomentum());

                      double TempChisqF = pipi.chisqFit();
                      ChisqV2 = jpsi_ll.chisqVtx();
                      ChisqF2 = jpsi_ll.chisqFit();

                      if(TempChisqF < ChisqF1){
                        ChisqV1 = pipi.chisqVtx();
                        ChisqF1 = pipi.chisqFit();

                        F1PI0PE[0]=v1pi0.e();
                        F1PI0PX[0]=v1pi0.px();
                        F1PI0PY[0]=v1pi0.py();
                        F1PI0PZ[0]=v1pi0.pz();
                        F1PI0PE[1]=v2pi0.e();
                        F1PI0PX[1]=v2pi0.px();
                        F1PI0PY[1]=v2pi0.py();
                        F1PI0PZ[1]=v2pi0.pz();
                        F1PE[0]=v1pi.e();
                        F1PX[0]=v1pi.px();
                        F1PY[0]=v1pi.py();
                        F1PZ[0]=v1pi.pz();
                        F1PE[1]=v2pi.e();
                        F1PX[1]=v2pi.px();
                        F1PY[1]=v2pi.py();
                        F1PZ[1]=v2pi.pz();
                        PI0HIE[0] = pi0Itr->hiEnShower().attributes().energy(); // before fitting value
                        PI0LOE[0] = pi0Itr->loEnShower().attributes().energy(); // before fitting value
                        PI0HIE[1] = pi0Itr2->hiEnShower().attributes().energy(); // before fitting value
                        PI0LOE[1] = pi0Itr2->loEnShower().attributes().energy(); // before fitting value
                      }
                    }
                 }
             }
           }
         }
       }

     }
     if(ChisqV1 < 100000 && ChisqF1 < 100000) {
         PASSED3 = 1;
         PEAK3 = sqrt(pow((F1PE[0]+F1PE[1]+F1PI0PE[0]+F1PI0PE[1]),2)-pow((F1PX[0]+F1PX[1]+F1PI0PX[0]+F1PI0PX[1]),2)
                 -pow((F1PY[0]+F1PY[1]+F1PI0PY[0]+F1PI0PY[1]),2)-pow((F1PZ[0]+F1PZ[1]+F1PI0PZ[0]+F1PI0PZ[1]),2));
     }
   }

   tuple[chisqv1] = ChisqV1;
   tuple[chisqf1] = ChisqF1;
   tuple[chisqv2] = ChisqV2;
   tuple[chisqf2] = ChisqF2;

   tuple[knshower] = unmatchedShowers;

   tuple[e1] = E[0];
   tuple[th1] = Theta[0];
   tuple[phi1] = Phi[0];
   tuple[e9251] = E925[0];

   tuple[e2] = E[1];
   tuple[th2] = Theta[1];
   tuple[phi2] = Phi[1];
   tuple[e9252] = E925[1];

   tuple[e3] = E[2];
   tuple[th3] = Theta[2];
   tuple[phi3] = Phi[2];
   tuple[e9253] = E925[2];

   tuple[e4] = E[3];
   tuple[th4] = Theta[3];
   tuple[phi4] = Phi[3];
   tuple[e9254] = E925[3];

   tuple[e5] = E[4];
   tuple[th5] = Theta[4];
   tuple[phi5] = Phi[4];
   tuple[e9255] = E925[4];

   tuple[e6] = E[5];
   tuple[th6] = Theta[5];
   tuple[phi6] = Phi[5];
   tuple[e9256] = E925[5];

   tuple[e7] = E[6];
   tuple[th7] = Theta[6];
   tuple[phi7] = Phi[6];
   tuple[e9257] = E925[6];

   tuple[e8] = E[7];
   tuple[th8] = Theta[7];
   tuple[phi8] = Phi[7];
   tuple[e9258] = E925[7];

   tuple[e9] = E[8];
   tuple[th9] = Theta[8];
   tuple[phi9] = Phi[8];
   tuple[e9259] = E925[8];

   tuple[e10] = E[9];
   tuple[th10] = Theta[9];
   tuple[phi10] = Phi[9];
   tuple[e92510] = E925[9];

   tuple[eop1] = EOP[0];
   tuple[eop2] = EOP[1];
   tuple[me1] = ME[0];
   tuple[me2] = ME[1];
   tuple[dedx1] = DEDX[0];
   tuple[dedx2] = DEDX[1];
   tuple[trte1] = PE[0];
   tuple[trpx1] = PX[0];
   tuple[trpy1] = PY[0];
   tuple[trpz1] = PZ[0];
   tuple[trte2] = PE[1];
   tuple[trpx2] = PX[1];
   tuple[trpy2] = PY[1];
   tuple[trpz2] = PZ[1];
   tuple[f1trte1] = F1PE[0];
   tuple[f1trpx1] = F1PX[0];
   tuple[f1trpy1] = F1PY[0];
   tuple[f1trpz1] = F1PZ[0];
   tuple[f1trte2] = F1PE[1];
   tuple[f1trpx2] = F1PX[1];
   tuple[f1trpy2] = F1PY[1];
   tuple[f1trpz2] = F1PZ[1];
   tuple[f1pi0te1] = F1PI0PE[0];
   tuple[f1pi0px1] = F1PI0PX[0];
   tuple[f1pi0py1] = F1PI0PY[0];
   tuple[f1pi0pz1] = F1PI0PZ[0];
   tuple[f1pi0te2] = F1PI0PE[1];
   tuple[f1pi0px2] = F1PI0PX[1];
   tuple[f1pi0py2] = F1PI0PY[1];
   tuple[f1pi0pz2] = F1PI0PZ[1];
   tuple[pi0hie1] = PI0HIE[0];
   tuple[pi0hie2] = PI0HIE[1];
   tuple[pi0loe1] = PI0LOE[0];
   tuple[pi0loe2] = PI0LOE[1];
   tuple[id1] = ID[0];
   tuple[id2] = ID[1];
   tuple[charge1] = CHARGE[0];
   tuple[charge2] = CHARGE[1];
   tuple[passed2] = PASSED2;
   tuple[passed3] = PASSED3;
   tuple[peak2] = PEAK2;
   tuple[peak3] = PEAK3;

   (*m_showerTuple).fill(tuple);
    


   return ActionBase::kPassed;
}


ActionBase::ActionResult
Pi0Pi0JpsiProc::beginRun( Frame& iFrame )       // anal2 equiv.
{
   report( DEBUG, kFacilityString ) << "here in beginRun()" << endl;
   FAItem< BeamSpot > spot;
   extract( iFrame.record( Stream::kBeginRun ), spot );

   FAItem< BeamEnergy > beam_energy;
   extract( iFrame.record( Stream::kBeginRun ), beam_energy );

   FAItem< MagneticField > cleoBField;
   extract( iFrame.record( Stream::kBeginRun ), cleoBField );

   FitEvtSettings &settings(FitEvtSettings::instance());
   settings.setField(*cleoBField);
   settings.setBeamSpot(*spot);
   settings.setLorVecCM( beam_energy->value() );

   return ActionBase::kPassed;
}


/*
ActionBase::ActionResult
Pi0Pi0JpsiProc::endRun( Frame& iFrame )         // anal4 equiv.
{
   report( DEBUG, kFacilityString ) << "here in endRun()" << endl;

   return ActionBase::kPassed;
}
*/

//
// const member functions
//

//
// static member functions
//
