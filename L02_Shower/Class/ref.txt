// -*- C++ -*-
//
// Package:     L02_Shower
// Module:      L02_Shower
// 
// Description: Lesson 2: Showers
//
// Implementation:
//     use /cdat/daf9/jima/suez/tcl/L02_Shower.tcl
//
// Author:      James Alexander
// Created:     Wed Jan  1 08:01:30 EST 2003
// $Id$
//
// Revision history
//
// $Log$
//

#include "Experiment/Experiment.h"

// system include files

// user include files
#include "L02_Shower/L02_Shower.h"
#include "Experiment/report.h"
#include "Experiment/units.h"  // for converting to/from standard CLEO units
#include "HistogramInterface/HINtupleVarNames.h"
//#include "HistogramInterface/HINtupleArray.h"
#include "HistogramInterface/HIHist1D.h"

#include "DataHandler/Record.h"
#include "DataHandler/Frame.h"
#include "FrameAccess/extract.h"
#include "FrameAccess/FAItem.h"
#include "FrameAccess/FATable.h"

#include "Navigation/NavTrack.h"
#include "TrackRoot/TRHelixFit.h"
#include "TrackRoot/TRTrackFitQuality.h"
#include "TrackRoot/TRSeedTrackQuality.h"
#include "TrackDelivery/TDKinematicFit.h"

#include "DedxInfo/DedxInfo.h"
#include "LabNet4Momentum/LabNet4Momentum.h"

#include "Navigation/NavShower.h"
#include "C3cc/CcShowerAttributes.h"

//I added the following at the suggestion of the NavShower web page
#include "Navigation/NavConReg.h"
#include "KinematicTrajectory/KTKinematicData.h"
#include "Navigation/NavTkShMatch.h"
#include "C3cc/CcAssignedEnergyHit.h"

// STL classes
// You may have to uncomment some of these or other stl headers 
// depending on what other header files you include (e.g. FrameAccess etc.)!
//#include <string>
//#include <vector>
//#include <set>
//#include <map>
//#include <algorithm>
//#include <utility>

//
// constants, enums and typedefs
//
static const char* const kFacilityString = "Processor.L02_Shower" ;

// ---- cvs-based strings (Id and Tag with which file was checked out)
static const char* const kIdString  = "$Id: processor.cc,v 1.33 2002/12/18 01:45:06 cdj Exp $";
static const char* const kTagString = "$Name: v06_08_00 $";

//
// static data member definitions
//



//
// constructors and destructor
//
L02_Shower::L02_Shower( void )               // anal1
   : Processor( "L02_Shower" )
{
   report( DEBUG, kFacilityString ) << "here in ctor()" << endl;

   // ---- bind a method to a stream -----
   // These lines ARE VERY IMPORTANT! If you don't bind the 
   // code you've just written (the "action") to a stream, 
   // your code won't get executed!

   bind( &L02_Shower::event,    Stream::kEvent );
   //bind( &L02_Shower::beginRun, Stream::kBeginRun );
   //bind( &L02_Shower::endRun,   Stream::kEndRun );

   // do anything here that needs to be done at creation time
   // (e.g. allocate resources etc.)


}

L02_Shower::~L02_Shower()                    // anal5
{
   report( DEBUG, kFacilityString ) << "here in dtor()" << endl;
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}

//
// member functions
//

// ------------ methods for beginning/end "Interactive" ------------
// --------------------------- init method -------------------------
void
L02_Shower::init( void )          // anal1 "Interactive"
{
   report( DEBUG, kFacilityString ) << "here in init()" << endl;

   // do any initialization here based on Parameter Input by User
   // (e.g. run expensive algorithms that are based on parameters
   //  specified by user at run-time)

}

// -------------------- terminate method ----------------------------
void
L02_Shower::terminate( void )     // anal5 "Interactive"
{
   report( DEBUG, kFacilityString ) << "here in terminate()" << endl;

   // do anything here BEFORE New Parameter Change
   // (e.g. write out result based on parameters from user-input)
 
}


// ---------------- standard place to book histograms ---------------

//m_psi = iHistoManager.histogram("psi mass (GeV)", 1000, 0.25,
//                                       0.35);



enum {e1,th1,ph1,e9251,barrel1,//psim1,
e2,th2,ph2,e9252,barrel2,//psim2,
e3,th3,ph3,e9253,barrel3,//psim3,
e4,th4,ph4,e9254,barrel4,//psim4,
e5,th5,ph5,e9255,barrel5,//psim5,
e6,th6,ph6,e9256,barrel6,//psim6,
e7,th7,ph7,e9257,barrel7,//psim7,
e8,th8,ph8,e9258,barrel8,//psim8,
e9,th9,ph9,e9259,barrel9,//psim9,
e10,th10,ph10,e92510,barrel10,//psim10,
e11,th11,ph11,e92511,barrel11,//psim11,
e12,th12,ph12,e92512,barrel12,//psim12,
e13,th13,ph13,e92513,barrel13,//psim13,
e14,th14,ph14,e92514,barrel14,//psim14,
e15,th15,ph15,e92515,barrel15, kVarNum};


void
L02_Shower::hist_book( HIHistoManager& iHistoManager )
{
   report( DEBUG, kFacilityString ) << "here in hist_book()" << endl;


m_psi = iHistoManager.histogram("psi mass (GeV)", 1000, 2.5,
                                       3.5);
m_test = iHistoManager.histogram("test", 1000, 2.5,
                                       3.5);

   HINtupleVarNames ntupleNames(kVarNum);
   ntupleNames.addVar(e1,          "e1");
   ntupleNames.addVar(th1,        "th1");
   ntupleNames.addVar(ph1,       "phi1");
   ntupleNames.addVar(e9251,    "e9251");
   ntupleNames.addVar(barrel1,   "barrel1");
  // ntupleNames.addVar(psim1,    "psim1");

   ntupleNames.addVar(e2,          "e2");
   ntupleNames.addVar(th2,        "th2");
   ntupleNames.addVar(ph2,       "phi2");
   ntupleNames.addVar(e9252,    "e9252");
   ntupleNames.addVar(barrel2,   "barrel2");
  // ntupleNames.addVar(psim2,    "psim2");

   ntupleNames.addVar(e3,          "e3");
   ntupleNames.addVar(th3,        "th3");
   ntupleNames.addVar(ph3,       "phi3");
   ntupleNames.addVar(e9253,    "e9253");
   ntupleNames.addVar(barrel3,   "barrel3");
  // ntupleNames.addVar(psim3,    "psim3");

   ntupleNames.addVar(e4,          "e4");
   ntupleNames.addVar(th4,        "th4");
   ntupleNames.addVar(ph4,       "phi4");
   ntupleNames.addVar(e9254,    "e9254");
   ntupleNames.addVar(barrel4,   "barrel4");
  //ntupleNames.addVar(psim4,    "psim4");

   ntupleNames.addVar(e5,          "e5");
   ntupleNames.addVar(th5,        "th5");
   ntupleNames.addVar(ph5,       "phi5");
   ntupleNames.addVar(e9255,    "e9255");
   ntupleNames.addVar(barrel5,   "barrel5");
  // ntupleNames.addVar(psim5,    "psim5");

   ntupleNames.addVar(e6,          "e6");
   ntupleNames.addVar(th6,        "th6");
   ntupleNames.addVar(ph6,       "phi6");
   ntupleNames.addVar(e9256,    "e9256");
   ntupleNames.addVar(barrel6,   "barrel6");
  // ntupleNames.addVar(psim6,    "psim6");

   ntupleNames.addVar(e7,          "e7");
   ntupleNames.addVar(th7,        "th7");
   ntupleNames.addVar(ph7,       "phi7");
   ntupleNames.addVar(e9257,    "e9257");
   ntupleNames.addVar(barrel7,   "barrel7");
  // ntupleNames.addVar(psim7,    "psim7");

   ntupleNames.addVar(e8,          "e8");
   ntupleNames.addVar(th8,        "th8");
   ntupleNames.addVar(ph8,       "phi8");
   ntupleNames.addVar(e9258,    "e9258");
   ntupleNames.addVar(barrel8,   "barrel8");
  // ntupleNames.addVar(psim1,    "psim1");

   ntupleNames.addVar(e9,          "e9");
   ntupleNames.addVar(th9,        "th9");
   ntupleNames.addVar(ph9,       "phi9");
   ntupleNames.addVar(e9259,    "e9259");
   ntupleNames.addVar(barrel9,   "barrel9");
  // ntupleNames.addVar(psim9,    "psim9");

   ntupleNames.addVar(e10,          "e10");
   ntupleNames.addVar(th10,        "th10");
   ntupleNames.addVar(ph10,       "phi10");
   ntupleNames.addVar(e92510,    "e92510");
   ntupleNames.addVar(barrel10,   "barrel10");
  // ntupleNames.addVar(psim10,    "psim10");

   ntupleNames.addVar(e11,          "e11");
   ntupleNames.addVar(th11,        "th11");
   ntupleNames.addVar(ph11,       "phi11");
   ntupleNames.addVar(e92511,    "e92511");
   ntupleNames.addVar(barrel11,   "barrel11");
//   ntupleNames.addVar(psim11,    "psim11");

   ntupleNames.addVar(e12,          "e12");
   ntupleNames.addVar(th12,        "th12");
   ntupleNames.addVar(ph12,       "phi12");
   ntupleNames.addVar(e92512,    "e92512");
   ntupleNames.addVar(barrel12,   "barrel12");
   //ntupleNames.addVar(psim12,    "psim12");

   ntupleNames.addVar(e13,          "e13");
   ntupleNames.addVar(th13,        "th13");
   ntupleNames.addVar(ph13,       "phi13");
   ntupleNames.addVar(e92513,    "e92513");
   ntupleNames.addVar(barrel13,   "barrel13");
  // ntupleNames.addVar(psim13,    "psim13");

   ntupleNames.addVar(e14,          "e14");
   ntupleNames.addVar(th14,        "th14");
   ntupleNames.addVar(ph14,       "phi14");
   ntupleNames.addVar(e92514,    "e92514");
   ntupleNames.addVar(barrel14,   "barrel14");
//   ntupleNames.addVar(psim14,    "psim14");

   ntupleNames.addVar(e15,          "e15");
   ntupleNames.addVar(th15,        "th15");
   ntupleNames.addVar(ph15,       "phi15");
   ntupleNames.addVar(e92515,    "e92515");
   ntupleNames.addVar(barrel15,   "barrel15");
//   ntupleNames.addVar(psim,    "psim");




   m_showerTuple = iHistoManager.ntuple(10,"tuple", kVarNum, 10000, ntupleNames.names());

 

}

// Good track selection function
DABoolean isGoodTrack(const NavTrack& track) {
   const TRHelixFit& helix = *track.pionHelix();
   const TRTrackFitQuality& fitqual = *track.pionQuality();
   return (0.05 < (*track.pionFit()).pmag() && (*track.pionFit()).pmag() < 2.0
           && fabs(helix.d0()) < 0.005
           && fabs(helix.z0()) < 0.05
           && fitqual.chiSquare() < 100000
           && fitqual.ratioNumberHitsToExpected() > 0.5
           && ! fitqual.fitAbort());
}

// Pion particle ID by dE/dx
DABoolean isPion(const NavTrack& track) {
   const FAItem<DedxInfo>& dedxinfo = track.dedxInfo();
   return (dedxinfo.valid() && (*dedxinfo).valid()
           && fabs((*dedxinfo).piSigma()) < 3.0);
}


// --------------------- methods bound to streams -------------------
ActionBase::ActionResult
L02_Shower::event( Frame& iFrame )          // anal3 equiv.
{
//   report( INFO, kFacilityString ) << "here in event()" << endl;
   report( DEBUG, kFacilityString ) << "here in event()" << endl;

   const int kMaxShower = 15;
//   const int kMaxTrack = 15;
//   NavShower::Identifier SID[kMaxShower];
   double E[kMaxShower] = {-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.};
   double Theta[kMaxShower] = {-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.};
   double Phi[kMaxShower] = {-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.};
   double E925[kMaxShower] = {-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.};
   double Barrel[kMaxShower] = {0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.}; 
//   double PsiM[kMaxTrack] = {-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.,-10.};

   float tuple[kVarNum];

   //float psi = 2.7;
//   float tt = 0.2;
   bool psi = false;

   // Extract total 4-momentum to get CM energy

   FAItem< LabNet4Momentum > labMomentum ;
   extract( iFrame.record( Stream::kStartRun ), labMomentum ) ;

   // Extract tracks
   FATable< NavTrack > trackTable;
   extract( iFrame.record( Stream::kEvent ), trackTable );

   // Set up loop
   FATable< NavTrack >::const_iterator trackBegin = trackTable.begin();
   FATable< NavTrack >::const_iterator trackEnd = trackTable.end();

//   int psi = 0;
//   int tt = 0.2;
      for( FATable< NavTrack >::const_iterator trackItr1 = trackBegin ;
           trackItr1 != trackEnd ;
           ++trackItr1 )
      {
         // Proceed only if is good "kaon"
         if( isGoodTrack( *trackItr1 ) && isPion( *trackItr1 ) )
         {
            const TDKinematicFit& kineData1 = *( *trackItr1 ).pionFit();

            // Loop over *all* tracks since (a, b) != (b, a)
            for( FATable< NavTrack >::const_iterator trackItr2 = trackItr1+1 ;
                 trackItr2 != trackEnd ;
                 ++trackItr2 )
            {
               const TDKinematicFit& kineData2 = *( *trackItr2 ).pionFit() ;

               // Proceed if is good "pion" and opposite charge to track 1
               if( isGoodTrack( *trackItr2 ) &&
                   isPion( *trackItr2 ) &&
                   kineData2.charge() == -kineData1.charge() )
               {
                  const HepLorentzVector& v1 = kineData1.lorentzMomentum();
                  const HepLorentzVector& v2 = kineData2.lorentzMomentum();

                  // Total 4-vector.  Invariant mass would be tot.m().
                  HepLorentzVector tot( v1 + v2 ) ;

                  // D candidate energy
                  HepDouble psimass2 = pow((3.686-tot.e()),2)-pow(tot.e(),2)+pow(tot.m(),2);
                  HepDouble mass = sqrt(psimass2);

       //           m_test->fill(mass);              

                  if ( ( mass >= 3.087) && (mass <=3.107)){ 
                      //psi = 3.3;
			psi = true;
  //                    tt = mass;
                  // Set "tot" energy to beam energy ("beam constraining")
                  // Now, tot.m() will give the beam-constrained mass.
//                  tot.setE( ( *labMomentum ).e() / 2. ) ;

                  // Fill histogram with MBC and DeltaE.
//                  float trackTuple[knum_vars];
//                      trackTuple[psim] = mass;
                     m_psi->fill(mass); 
               //      break;
               }
//                     m_test->fill(psi);
//                  m_trackTuple->fill(trackTuple);
               }
            }
         }
   }



   FATable< NavShower > showerTable;
   extract( iFrame.record( Stream::kEvent ) , showerTable, "GoodThings" );

   FATable< NavShower >::const_iterator showerBegin = showerTable.begin();
   FATable< NavShower >::const_iterator showerEnd = showerTable.end();
  
   int unmatchedShowers = 0; 

   //if(psi >= 2.6 && psi <= 2.8){
//   float tuple[kVarNum];
//   m_test->fill(tt);
     //m_test->fill(psi);

   if(psi)
	return ActionBase::kFailed;

   for (FATable< NavShower >::const_iterator showerItr = showerBegin; 
        showerItr != showerEnd ; ++showerItr ){
  
   if((showerItr->attributes().goodBarrel() ||
       showerItr->attributes().goodEndcap() ) ) {
      
      int j = unmatchedShowers++;

      if(j<kMaxShower){
      E[j]=showerItr->attributes().energy();
      Theta[j]=showerItr->attributes().theta();
      Phi[j]=showerItr->attributes().phi();
      //E925[j]=showerItr->attributes().e9oe25();
      E925[j]=showerItr->attributes().x925();
      Barrel[j]=(showerItr->attributes().goodBarrel()>0);
      }
   }
   }
   } // end of loop of NavShowers

/*   // Extract tracks
   FATable< NavTrack > trackTable;
   extract( iFrame.record( Stream::kEvent ), trackTable );

   // Set up loop
   FATable< NavTrack >::const_iterator trackBegin = trackTable.begin();
   FATable< NavTrack >::const_iterator trackEnd = trackTable.end();

   int unmatchedTracks = 0;
   
   for( FATable< NavTrack >::const_iterator trackItr1 = trackBegin ;
           trackItr1 != trackEnd ;
           ++trackItr1 )
      {
         // Proceed only if is good "kaon"
         if( isGoodTrack( *trackItr1 ) && isPion( *trackItr1 ) )
         {
            const TDKinematicFit& kineData1 = *( *trackItr1 ).pionFit();

            // Loop over *all* tracks since (a, b) != (b, a)
            for( FATable< NavTrack >::const_iterator trackItr2 = trackItr1+1 ;
                 trackItr2 != trackEnd ;
                 ++trackItr2 )
            {
               const TDKinematicFit& kineData2 = *( *trackItr2 ).pionFit() ;

               // Proceed if is good "pion" and opposite charge to track 1
               if( isGoodTrack( *trackItr2 ) &&
                   isPion( *trackItr2 ) &&
                   kineData2.charge() == -kineData1.charge() )
               {
  
                  int j = unmatchedTracks++;

                  const HepLorentzVector& v1 = kineData1.lorentzMomentum();
                  const HepLorentzVector& v2 = kineData2.lorentzMomentum();

                  // Total 4-vector.  Invariant mass would be tot.m().
                  HepLorentzVector tot( v1 + v2 ) ;

                  // D candidate energy
                  HepDouble psimass2 = pow((3.686-tot.e()),2)-pow(tot.e(),2)+pow(tot.m(),2);
                  HepDouble mass = sqrt(psimass2);
                  // Set "tot" energy to beam energy ("beam constraining")
                  // Now, tot.m() will give the beam-constrained mass.
//                  tot.setE( ( *labMomentum ).e() / 2. ) ;
                  // fill histogram with mbc and deltae.
//                  float trackTuple[knum_vars];
//                  trackTuple[psimass] = mass;
//                  m_trackTuple->fill(trackTuple);
               }
            }
         }
   }
*/

//   float tuple[kVarNum];

   tuple[e1] = E[0];
   tuple[th1] = Theta[0];
   tuple[ph1] = Phi[0];
   tuple[e9251] = E925[0];
   tuple[barrel1] = Barrel[0];
   tuple[e2] = E[1];
   tuple[th2] = Theta[1];
   tuple[ph2] = Phi[1];
   tuple[e9252] = E925[1];
   tuple[barrel2] = Barrel[1];
   tuple[e3] = E[2];
   tuple[th3] = Theta[2];
   tuple[ph3] = Phi[2];
   tuple[e9253] = E925[2];
   tuple[barrel3] = Barrel[2];
   tuple[e4] = E[3];
   tuple[th4] = Theta[3];
   tuple[ph4] = Phi[3];
   tuple[e9254] = E925[3];
   tuple[barrel4] = Barrel[3];
   tuple[e5] = E[4];
   tuple[th5] = Theta[4];
   tuple[ph5] = Phi[4];
   tuple[e9255] = E925[4];
   tuple[barrel5] = Barrel[4];
   tuple[e6] = E[5];
   tuple[th6] = Theta[5];
   tuple[ph6] = Phi[5];
   tuple[e9256] = E925[5];
   tuple[barrel6] = Barrel[5];
   tuple[e7] = E[6];
   tuple[th7] = Theta[6];
   tuple[ph7] = Phi[6];
   tuple[e9257] = E925[6];
   tuple[barrel7] = Barrel[6];
   tuple[e8] = E[7];
   tuple[th8] = Theta[7];
   tuple[ph8] = Phi[7];
   tuple[e9258] = E925[7];
   tuple[barrel8] = Barrel[7];
   tuple[e9] = E[8];
   tuple[th9] = Theta[8];
   tuple[ph9] = Phi[8];
   tuple[e9259] = E925[8];
   tuple[barrel9] = Barrel[8];
   tuple[e10] = E[9];
   tuple[th10] = Theta[9];
   tuple[ph10] = Phi[9];
   tuple[e92510] = E925[9];
   tuple[barrel10] = Barrel[9];
   tuple[e11] = E[10];
   tuple[th11] = Theta[10];
   tuple[ph11] = Phi[10];
   tuple[e92511] = E925[10];
   tuple[barrel11] = Barrel[10];
   tuple[e12] = E[11];
   tuple[th12] = Theta[11];
   tuple[ph12] = Phi[11];
   tuple[e92512] = E925[11];
   tuple[barrel12] = Barrel[11];
   tuple[e13] = E[12];
   tuple[th13] = Theta[12];
   tuple[ph13] = Phi[12];
   tuple[e92513] = E925[12];
   tuple[barrel13] = Barrel[12];
   tuple[e14] = E[13];
   tuple[th14] = Theta[13];
   tuple[ph14] = Phi[13];
   tuple[e92514] = E925[13];
   tuple[barrel14] = Barrel[13];
   tuple[e15] = E[14];
   tuple[th15] = Theta[14];
   tuple[ph15] = Phi[14];
   tuple[e92515] = E925[14];
   tuple[barrel15] = Barrel[14];

   (*m_showerTuple).fill(tuple);

   return ActionBase::kPassed;
}

/*
ActionBase::ActionResult
L02_Shower::beginRun( Frame& iFrame )       // anal2 equiv.
{
   report( DEBUG, kFacilityString ) << "here in beginRun()" << endl;

   return ActionBase::kPassed;
}
*/

/*
ActionBase::ActionResult
L02_Shower::endRun( Frame& iFrame )         // anal4 equiv.
{
   report( DEBUG, kFacilityString ) << "here in endRun()" << endl;

   return ActionBase::kPassed;
}
*/

//
// const member functions
//

//
// static member functions
//
