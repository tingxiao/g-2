// -*- C++ -*-
//
// Package:     L02_Shower
// Module:      L02_Shower
// 
// Description: Lesson 2: Showers
//
// Implementation:
//     use /cdat/daf9/jima/suez/tcl/L02_Shower.tcl
//
// Author:      James Alexander
// Created:     Wed Jan  1 08:01:30 EST 2003
// $Id$
//
// Revision history
//
// $Log$
//

#include "Experiment/Experiment.h"

// system include files

// user include files
#include "L02_Shower/L02_Shower.h"
#include "Experiment/report.h"
#include "Experiment/units.h"  // for converting to/from standard CLEO units
#include "HistogramInterface/HINtupleVarNames.h"

#include "DataHandler/Record.h"
#include "DataHandler/Frame.h"
#include "FrameAccess/extract.h"
#include "FrameAccess/FAItem.h"
#include "FrameAccess/FATable.h"


#include "Navigation/NavShower.h"
#include "C3cc/CcShowerAttributes.h"

//I added the following at the suggestion of the NavShower web page
#include "Navigation/NavConReg.h"
#include "KinematicTrajectory/KTKinematicData.h"
#include "Navigation/NavTkShMatch.h"
#include "C3cc/CcAssignedEnergyHit.h"

// STL classes
// You may have to uncomment some of these or other stl headers 
// depending on what other header files you include (e.g. FrameAccess etc.)!
//#include <string>
//#include <vector>
//#include <set>
//#include <map>
//#include <algorithm>
//#include <utility>

//
// constants, enums and typedefs
//
static const char* const kFacilityString = "Processor.L02_Shower" ;

// ---- cvs-based strings (Id and Tag with which file was checked out)
static const char* const kIdString  = "$Id: processor.cc,v 1.33 2002/12/18 01:45:06 cdj Exp $";
static const char* const kTagString = "$Name: v06_08_00 $";

//
// static data member definitions
//



//
// constructors and destructor
//
L02_Shower::L02_Shower( void )               // anal1
   : Processor( "L02_Shower" )
{
   report( DEBUG, kFacilityString ) << "here in ctor()" << endl;

   // ---- bind a method to a stream -----
   // These lines ARE VERY IMPORTANT! If you don't bind the 
   // code you've just written (the "action") to a stream, 
   // your code won't get executed!

   bind( &L02_Shower::event,    Stream::kEvent );
   //bind( &L02_Shower::beginRun, Stream::kBeginRun );
   //bind( &L02_Shower::endRun,   Stream::kEndRun );

   // do anything here that needs to be done at creation time
   // (e.g. allocate resources etc.)


}

L02_Shower::~L02_Shower()                    // anal5
{
   report( DEBUG, kFacilityString ) << "here in dtor()" << endl;
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}

//
// member functions
//

// ------------ methods for beginning/end "Interactive" ------------
// --------------------------- init method -------------------------
void
L02_Shower::init( void )          // anal1 "Interactive"
{
   report( DEBUG, kFacilityString ) << "here in init()" << endl;

   // do any initialization here based on Parameter Input by User
   // (e.g. run expensive algorithms that are based on parameters
   //  specified by user at run-time)

}

// -------------------- terminate method ----------------------------
void
L02_Shower::terminate( void )     // anal5 "Interactive"
{
   report( DEBUG, kFacilityString ) << "here in terminate()" << endl;

   // do anything here BEFORE New Parameter Change
   // (e.g. write out result based on parameters from user-input)
 
}


// ---------------- standard place to book histograms ---------------
enum {e1,th1,ph1,e9251,barrel1,
e2,th2,ph2,e9252,barrel2,
e3,th3,ph3,e9253,barrel3,
e4,th4,ph4,e9254,barrel4,
e5,th5,ph5,e9255,barrel5,
e6,th6,ph6,e9256,barrel6,
e7,th7,ph7,e9257,barrel7,
e8,th8,ph8,e9258,barrel8,
e9,th9,ph9,e9259,barrel9,
e10,th10,ph10,e92510,barrel10,
e11,th11,ph11,e92511,barrel11,
e12,th12,ph12,e92512,barrel12,
e13,th13,ph13,e92513,barrel13,
e14,th14,ph14,e92514,barrel14,
e15,th15,ph15,e92515,barrel15, kVarNum};

int ek[]={e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11,e12,e13,e14,e15};
int thk[]={th1,th2,th3,th4,th5,th6,th7,th8,th9,th10,th11,th12,th13,th14,th15};
int phk[]={ph1,ph2,ph3,ph4,ph5,ph6,ph7,ph8,ph9,ph10,ph11,ph12,ph13,ph14,ph15};
int e925k[]={e9251,e9252,e9253,e9254,e9255,e9256,e9257,e9258,e9259,e92510,e92511,e92512,e92513,e92514,e92515};
int barrelk[]={barrel1,barrel2,barrel3,barrel4,barrel5,barrel6,barrel7,barrel8,barrel9,barrel10,barrel11,barrel12,barrel13,barrel14,barrel15};

int *ekPtr = ek;
int *thkPtr = thk;
int *phkPtr = phk;
int *e925kPtr = e925k;
int *barrelkPtr = barrelk;


void
L02_Shower::hist_book( HIHistoManager& iHistoManager )
{
   report( DEBUG, kFacilityString ) << "here in hist_book()" << endl;

   HINtupleVarNames ntupleNames(kVarNum);
   ntupleNames.addVar(e1,          "e1");
   ntupleNames.addVar(th1,        "th1");
   ntupleNames.addVar(ph1,       "phi1");
   ntupleNames.addVar(e9251,    "e9251");
   ntupleNames.addVar(barrel1,   "barrel1");

   ntupleNames.addVar(e2,          "e2");
   ntupleNames.addVar(th2,        "th2");
   ntupleNames.addVar(ph2,       "phi2");
   ntupleNames.addVar(e9252,    "e9252");
   ntupleNames.addVar(barrel2,   "barrel2");

   ntupleNames.addVar(e3,          "e3");
   ntupleNames.addVar(th3,        "th3");
   ntupleNames.addVar(ph3,       "phi3");
   ntupleNames.addVar(e9253,    "e9253");
   ntupleNames.addVar(barrel3,   "barrel3");

   ntupleNames.addVar(e4,          "e4");
   ntupleNames.addVar(th4,        "th4");
   ntupleNames.addVar(ph4,       "phi4");
   ntupleNames.addVar(e9254,    "e9254");
   ntupleNames.addVar(barrel4,   "barrel4");

   ntupleNames.addVar(e5,          "e5");
   ntupleNames.addVar(th5,        "th5");
   ntupleNames.addVar(ph5,       "phi5");
   ntupleNames.addVar(e9255,    "e9255");
   ntupleNames.addVar(barrel5,   "barrel5");

   ntupleNames.addVar(e6,          "e6");
   ntupleNames.addVar(th6,        "th6");
   ntupleNames.addVar(ph6,       "phi6");
   ntupleNames.addVar(e9256,    "e9256");
   ntupleNames.addVar(barrel6,   "barrel6");

   ntupleNames.addVar(e7,          "e7");
   ntupleNames.addVar(th7,        "th7");
   ntupleNames.addVar(ph7,       "phi7");
   ntupleNames.addVar(e9257,    "e9257");
   ntupleNames.addVar(barrel7,   "barrel7");

   ntupleNames.addVar(e8,          "e8");
   ntupleNames.addVar(th8,        "th8");
   ntupleNames.addVar(ph8,       "phi8");
   ntupleNames.addVar(e9258,    "e9258");
   ntupleNames.addVar(barrel8,   "barrel8");

   ntupleNames.addVar(e9,          "e9");
   ntupleNames.addVar(th9,        "th9");
   ntupleNames.addVar(ph9,       "phi9");
   ntupleNames.addVar(e9259,    "e9259");
   ntupleNames.addVar(barrel9,   "barrel9");

   ntupleNames.addVar(e10,          "e10");
   ntupleNames.addVar(th10,        "th10");
   ntupleNames.addVar(ph10,       "phi10");
   ntupleNames.addVar(e92510,    "e92510");
   ntupleNames.addVar(barrel10,   "barrel10");

   ntupleNames.addVar(e11,          "e11");
   ntupleNames.addVar(th11,        "th11");
   ntupleNames.addVar(ph11,       "phi11");
   ntupleNames.addVar(e92511,    "e92511");
   ntupleNames.addVar(barrel11,   "barrel11");

   ntupleNames.addVar(e12,          "e12");
   ntupleNames.addVar(th12,        "th12");
   ntupleNames.addVar(ph12,       "phi12");
   ntupleNames.addVar(e92512,    "e92512");
   ntupleNames.addVar(barrel12,   "barrel12");

   ntupleNames.addVar(e13,          "e13");
   ntupleNames.addVar(th13,        "th13");
   ntupleNames.addVar(ph13,       "phi13");
   ntupleNames.addVar(e92513,    "e92513");
   ntupleNames.addVar(barrel13,   "barrel13");

   ntupleNames.addVar(e14,          "e14");
   ntupleNames.addVar(th14,        "th14");
   ntupleNames.addVar(ph14,       "phi14");
   ntupleNames.addVar(e92514,    "e92514");
   ntupleNames.addVar(barrel14,   "barrel14");

   ntupleNames.addVar(e15,          "e15");
   ntupleNames.addVar(th15,        "th15");
   ntupleNames.addVar(ph15,       "phi15");
   ntupleNames.addVar(e92515,    "e92515");
   ntupleNames.addVar(barrel15,   "barrel15");




   m_Showertuple = iHistoManager.ntuple(10,"Showers", kVarNum, 10000, ntupleNames.names());

 

}

// --------------------- methods bound to streams -------------------
ActionBase::ActionResult
L02_Shower::event( Frame& iFrame )          // anal3 equiv.
{
   report( INFO, kFacilityString ) << "here in event()" << endl;

   FATable< NavShower > showerTable;
   extract( iFrame.record( Stream::kEvent ) , showerTable, "GoodThings" );

   FATable< NavShower >::const_iterator showerBegin = showerTable.begin();
   FATable< NavShower >::const_iterator showerEnd = showerTable.end();
  
   int i = 0; 
   float tuple[kVarNum];
   for (FATable< NavShower >::const_iterator showerItr = showerBegin; 
        showerItr != showerEnd ; ++showerItr,*ekPtr++,*thkPtr++,*phkPtr++,*e925kPtr++,*barrelkPtr++ )
   {
      if (showerItr == showerBegin)  i=0;
      i++;
      if (i>15) break;
// Make various plots of simple shower quantities
      const CcGeV  thisEnergy ( showerItr->attributes().energy() ) ;
 
//      float tuple[kVarNum];
      tuple[*ekPtr]=(float)thisEnergy;
      tuple[*thkPtr]=showerItr->attributes().theta();
      tuple[*phkPtr]=showerItr->attributes().phi();
      tuple[*e925kPtr]=(float)showerItr->attributes().e9oe25();

      float barrel=0.0;
      if (showerItr->attributes().barrel()) {barrel=1.0;}
      tuple[*barrelkPtr]=barrel;

      if (showerItr == showerEnd-1 || i==15 )
      (*m_Showertuple).fill(tuple);


   } // end of loop of NavShowers

   return ActionBase::kPassed;
}

/*
ActionBase::ActionResult
L02_Shower::beginRun( Frame& iFrame )       // anal2 equiv.
{
   report( DEBUG, kFacilityString ) << "here in beginRun()" << endl;

   return ActionBase::kPassed;
}
*/

/*
ActionBase::ActionResult
L02_Shower::endRun( Frame& iFrame )         // anal4 equiv.
{
   report( DEBUG, kFacilityString ) << "here in endRun()" << endl;

   return ActionBase::kPassed;
}
*/

//
// const member functions
//

//
// static member functions
//
