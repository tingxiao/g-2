// -*- C++ -*-
//
// Package:     DumpDecayTreeProc
// Module:      DumpDecayTreeProc
// 
// Description: <one line class summary>
//
// Implementation:
//     <Notes on implementation>
//
// Author:      Hanna Mahlke-Krueger
// Created:     Mon Jun 18 16:02:36 EDT 2001
// $Id$
//
// Revision history
//
// $Log$
//

#include "Experiment/Experiment.h"

// system include files

// user include files
#include "DumpDecayTreeProc/DumpDecayTreeProc.h"
#include "Experiment/report.h"
#include "Experiment/units.h"  // for converting to/from standard CLEO units

#include "DataHandler/Record.h"
#include "DataHandler/Frame.h"
#include "FrameAccess/extract.h"
#include "FrameAccess/FAItem.h"
#include "FrameAccess/FATable.h"

#include "MCInfo/MCDecayTree/MCDecayTree.h"
#include "MCInfo/MCDecayTree/MCParticle.h"
#include "MCInfo/MCDecayTree/MCVertex.h"
#include "MCInfo/MCParticleProperty/MCParticleProperty.h"

#include "MCBeam/MCBeamParameters.h"
#include "CesrCleoComm/CesrCrossingAngle.h"

#include "CLHEP/Vector/LorentzRotation.h"



// STL classes
// You may have to uncomment some of these or other stl headers 
// depending on what other header files you include (e.g. FrameAccess etc.)!
//#include <string>
//#include <vector>
//#include <set>
//#include <map>
//#include <algorithm>
//#include <utility>




//
// constants, enums and typedefs
//
static const char* const kFacilityString = "Processor.DumpDecayTreeProc" ;

// ---- cvs-based strings (Id and Tag with which file was checked out)
static const char* const kIdString  = "$Id: processor.cc,v 1.17 2000/12/04 19:11:11 cdj Exp $";
static const char* const kTagString = "$Name: v03_06_00 $";

//
// static data member definitions
//

//
// constructors and destructor
//
DumpDecayTreeProc::DumpDecayTreeProc( void )               // anal1
   : Processor( "DumpDecayTreeProc" )
{
   report( DEBUG, kFacilityString ) << "here in ctor()" << endl;

   // ---- bind a method to a stream -----
   // These lines ARE VERY IMPORTANT! If you don't bind the 
   // code you've just written (the "action") to a stream, 
   // your code won't get executed!

   bind( &DumpDecayTreeProc::event,    Stream::kEvent );
   //bind( &DumpDecayTreeProc::beginRun, Stream::kBeginRun );
   //bind( &DumpDecayTreeProc::endRun,   Stream::kEndRun );

   // do anything here that needs to be done at creation time
   // (e.g. allocate resources etc.)

}

DumpDecayTreeProc::~DumpDecayTreeProc()                    // anal5
{
   report( DEBUG, kFacilityString ) << "here in dtor()" << endl;
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}

//
// member functions
//

// ------------ methods for beginning/end "Interactive" ------------
// --------------------------- init method -------------------------
void
DumpDecayTreeProc::init( void )          // anal1 "Interactive"
{
   report( DEBUG, kFacilityString ) << "here in init()" << endl;

   // do any initialization here based on Parameter Input by User
   // (e.g. run expensive algorithms that are based on parameters
   //  specified by user at run-time)

}

// -------------------- terminate method ----------------------------
void
DumpDecayTreeProc::terminate( void )     // anal5 "Interactive"
{
   report( DEBUG, kFacilityString ) << "here in terminate()" << endl;

   // do anything here BEFORE New Parameter Change
   // (e.g. write out result based on parameters from user-input)
 
}

// ---------------- standard place to book histograms ---------------
void
DumpDecayTreeProc::hist_book( HIHistoManager& iHistoManager )
{
   report( DEBUG, kFacilityString ) << "here in hist_book()" << endl;




   h_ns = iHistoManager.histogram("ns", 4, 0., 4);

   h_e = iHistoManager.histogram("e", 100, 0, 5);

   h_emax = iHistoManager.histogram("emax", 100, 0, 5);

   h_e_costh = iHistoManager.histogram("e_costh", 200, -1, 1);

   h_ns_fsr = iHistoManager.histogram("ns_fsr", 4, 0., 4);

   h_e_fsr = iHistoManager.histogram("e_fsr", 100, 0, 5);

   h_e_costh_fsr = iHistoManager.histogram("e_costh_fsr", 200, -1, 1);

   h_e_costh_count = iHistoManager.histogram("e_costh_count", 200, -1, 1); 
               // events that only one photon (ISR or FSR with E>50MeV) in the detectable region
   h_mpipi = iHistoManager.histogram("mpipi", 400, 0., 4);
               // events that only one photon (ISR or FSR with E>50MeV) in the detectable region
}

// --------------------- methods bound to streams -------------------
ActionBase::ActionResult
DumpDecayTreeProc::event( Frame& iFrame )          // anal3 equiv.
{
   report( DEBUG, kFacilityString ) << "here in event()" << endl;

   // Let's extract the tree (no usage tag means we get the CLEOG tree)
   FAItem< MCDecayTree > decayTree;

///////////////////////////////////////////////////////////////////
// NOTE: The first extract line is for dumping the cleog-level 
//       decay tree, the later is for dumping the generator-level
//       decay tree.

//   extract(iFrame.record(Stream::kEvent), decayTree);

   extract(iFrame.record(Stream::kEvent), decayTree, "Generator" );

///////////////////////////////////////////////////////////////////
 double ISR_e = 0;
 double ISR_costh = -10;
 int nshower = 0;
 double ISR_emax = 0;
 double FSR_e = 0;
 double FSR_costh = -10;
 int nfsr = 0;
 int count_isr = 0;
 int count_fsr = 0;

 double ppi_e = -10;
 double ppi_px = 0;
 double ppi_py = 0;
 double ppi_pz = 0;
 double npi_e = -10;
 double npi_px = 0;
 double npi_py = 0;
 double npi_pz = 0;


 for(MCDecayTree::const_pIterator it = decayTree->pBegin();
       it != decayTree->pEnd(); it++) {

   if( ( it->properties().PDGId() == 22 ) ) {
         const MCVertex* vphoVtx = it->productionVertex();
         const MCParticle& parent = (*vphoVtx).parent();

     if(parent.properties().PDGId() == 91){
         ISR_e = it->energy();
         h_e->fill(ISR_e);
         if(it->energy() >= ISR_emax) {
           ISR_emax = it->energy();
//           if(ISR_emax>=0.4 && ISR_emax<=0.5)
           ISR_costh = it->pz()/it->pmag();
           if(ISR_emax > 0.05) {
             if(fabs(ISR_costh)<0.81 || (fabs(ISR_costh)<0.93 && fabs(ISR_costh)>0.85) ) {
               count_isr++;
             }
           }
         }
         nshower++;
     }

     if(parent.properties().PDGId() == 100022){
         FSR_e = it->energy();
         h_e_fsr->fill(FSR_e);
         FSR_costh = it->pz()/it->pmag();
         h_e_costh_fsr->fill(FSR_costh);
         nfsr++;
         if(FSR_e > 0.05) {
           if(fabs(FSR_costh)<0.81 || (fabs(FSR_costh)<0.93 && fabs(FSR_costh)>0.85) ) { 
             count_fsr++;
           }
         }
     }
   }

   else if( ( it->properties().PDGId() == 211 ) ) {
     ppi_px = it->px();
     ppi_py = it->py();
     ppi_pz = it->pz();
     ppi_e  = it->energy();
   }

   else if( ( it->properties().PDGId() == -211 ) ) {
     npi_px = it->px();
     npi_py = it->py();
     npi_pz = it->pz();
     npi_e  = it->energy();
   }

 }

 if((count_isr+count_fsr) == 1) {

   if(count_isr == 1 && count_fsr == 0) {
     h_e_costh_count->fill(ISR_costh);
   }
   else if(count_isr == 0 && count_fsr == 1) {
     h_e_costh_count->fill(FSR_costh);
   }

   if(ppi_e > 0 && npi_e > 0) {
     double m_pipi = sqrt(pow((ppi_e+npi_e),2) - pow((ppi_px+npi_px),2) - pow((ppi_py+npi_py),2) - pow((ppi_pz+npi_pz),2));
     h_mpipi->fill(m_pipi);
   }
 }

  
 h_ns->fill(count_isr);
 h_ns_fsr->fill(count_fsr);
 h_emax->fill(ISR_emax);
 h_e_costh->fill(ISR_costh);


   return ActionBase::kPassed;
}

/*
ActionBase::ActionResult
DumpDecayTreeProc::beginRun( Frame& iFrame )       // anal2 equiv.
{
   report( DEBUG, kFacilityString ) << "here in beginRun()" << endl;

   return ActionBase::kPassed;
}
*/

/*
ActionBase::ActionResult
DumpDecayTreeProc::endRun( Frame& iFrame )         // anal4 equiv.
{
   report( DEBUG, kFacilityString ) << "here in endRun()" << endl;

  TCanvas *c1 = new TCanvas("c1", "babayaga", 300, 300, 800, 600);

  h_ns->Draw();
  c1->Print("babayaga.ps(");
  h_e1->Draw();
  c1->Print("babayaga.ps)");

  TFile outf("babayaga.root", "recreate");
  h_ns->Write();
  h_e1->Write();
  h_e2->Write();
  h_e3->Write();
//  h_e1_costh->Write();
//  h_e2_costh->Write();
//  h_e3_costh->Write();

  outf.Close();





   return ActionBase::kPassed;
}

*/
//
// const member functions
//

//
// static member functions
//

